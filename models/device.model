# -*- tab-width: 2; indent-tabs-mode: nil -*-
#
#
# sunspec modbus device models
#
#
# Copyright (c) 2011, John D. Blair <jdb@moship.net>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
#     * Neither the name of John D. Blair nor his lackeys may be used
#       to endorse or promote products derived from this software
#       without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
# JOHN D. BLAIR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#



#
# common model
#
model suns {
  name "common"
  did 001 "common"
  datapoints {
    C_Manufacturer             { string.32 }
    C_Model                    { string.32 }
    C_Options         	       { string.16 }
    C_Version                  { string.16 }
    C_SerialNumber             { string.32 }
    C_DeviceAddress            { uint16    }
  }
}

data common_model_test {
  001
  65 
  string.32 : "Amalgamated Industries"        # c_manufacturer
  string.32 : "Composite SuperDevice"         # c_model
  string.16 : "Mark 2 <&'>"                   # c_options
  string.16 : "3.14.159"                      # c_version
  string.32 : "9876543210"                    # c_serialnumber
  uint16    : 99                              # c_deviceaddress
}


#
# inverter model
#
model suns {
  name "inverter"
  did 101 "single-phase inverter"
  did 102 "split-phase inverter"
  did 103 "three-phase inverter"
  datapoints {
    I_AC_Current               {  uint16.I_AC_Current_SF u=amps }
    I_AC_CurrentA              {  uint16.I_AC_Current_SF u=amps }
    I_AC_CurrentB              {  uint16.I_AC_Current_SF u=amps }
    I_AC_CurrentC              {  uint16.I_AC_Current_SF u=amps }
    I_AC_Current_SF            {  sunssf }
    I_AC_VoltageAB             {  uint16.I_AC_Voltage_SF u=volts }
    I_AC_VoltageBC             {  uint16.I_AC_Voltage_SF u=volts }
    I_AC_VoltageCA             {  uint16.I_AC_Voltage_SF u=volts }
    I_AC_VoltageAN             {  uint16.I_AC_Voltage_SF u=volts }
    I_AC_VoltageBN             {  uint16.I_AC_Voltage_SF u=volts }
    I_AC_VoltageCN             {  uint16.I_AC_Voltage_SF u=volts }
    I_AC_Voltage_SF            {  sunssf }
    I_AC_Power                 {  int16.I_AC_Power_SF u=watts }
    I_AC_Power_SF              {  sunssf }
    I_AC_Frequency             {  uint16.I_AC_Frequency_SF u=hertz }
    I_AC_Frequency_SF          {  sunssf }
    I_AC_VA                    {  int16.I_AC_VA_SF u=volt_amps }
    I_AC_VA_SF                 {  sunssf }
    I_AC_VAR                   {  int16.I_AC_VAR_SF u=volt_amps_reactive }
    I_AC_VAR_SF                {  sunssf }
    I_AC_PF                    {  int16.I_AC_PF_SF u=powerfactor }
    I_AC_PF_SF                 {  sunssf }
    I_AC_Energy_WH             {  uint32.I_AC_Energy_WH_SF u=watthours }
    I_AC_Energy_WH_SF          {  sunssf }
    I_DC_Current               {  uint16.I_DC_Current_SF u=amps }
    I_DC_Current_SF            {  sunssf }
    I_DC_Voltage               {  uint16.I_DC_Voltage_SF u=volts }
    I_DC_Voltage_SF            {  sunssf }
    I_DC_Power                 {  int16.I_DC_Power_SF u=watts }
    I_DC_Power_SF              {  sunssf }
    I_Temp_Cab                 {  int16.I_Temp_SF u=degrees_c }
    I_Temp_Sink                {  int16.I_Temp_SF u=degrees_c }
    I_Temp_Trans               {  int16.I_Temp_SF u=degrees_c }
    I_Temp_Other               {  int16.I_Temp_SF u=degrees_c }
    I_Temp_SF                  {  sunssf }
    I_Status                   {  enum16.I_Status_Enum }
    I_Status_Vendor            {  enum16 }
    I_Event_1                  {  bitfield32.I_Event_1_BF }
    I_Event_2                  {  bitfield32 }
    I_Event_1_Vendor           {  bitfield32 }
    I_Event_2_Vendor           {  bitfield32 }
    I_Event_3_Vendor           {  bitfield32 }
    I_Event_4_Vendor           {  bitfield32 }
  }

  define I_Status_Enum {
    I_STATUS_OFF               { 1 "Off" }
    I_STATUS_SLEEPING          { 2 "Sleeping (auto-shutdown)" }
    I_STATUS_STARTING          { 3 "Starting up" }
    I_STATUS_MPPT              { 4 "Tracking power point" }
    I_STATUS_THROTTLED         { 5 "Forced power reduction" }
    I_STATUS_SHUTTING_DOWN     { 6 "Shutting down" }
    I_STATUS_FAULT             { 7 "One or more faults exist" }
    I_STATUS_STANDBY           { 8 "Standby (service on unit)" }
  }

  define T_bitfield16_BF {
    I_EVENT_GROUND_FAULT       { 0x00000001 "Ground fault" }
    I_EVENT_DC_OVER_VOLT       { 0x00000002 "DC over voltage" }
    I_EVENT_AC_DISCONNECT      { 0x00000004 "AC disconnect open" }
    I_EVENT_DC_DISCONNECT      { 0x00000008 "DC disconnect open" }
    I_EVENT_GRID_DISCONNECT    { 0x00000010 "Grid shutdown" }
    I_EVENT_CABINET_OPEN       { 0x00000020 "Cabinet open" }
    I_EVENT_MANUAL_SHUTDOWN    { 0x00000040 "Manual shutdown" }
    I_EVENT_OVER_TEMP          { 0x00000080 "Over temperature" }
    I_EVENT_OVER_FREQUENCY     { 0x00000100 "Frequency above limit" }
    I_EVENT_UNDER_FREQUENCY    { 0x00000200 "Frequency under limit" }
    I_EVENT_AC_OVER_VOLT       { 0x00000400 "AC Voltage above limit" }
    I_EVENT_AC_UNDER_VOLT      { 0x00000800 "AC Voltage under limit" }
    I_EVENT_BLOWN_STRING_FUSE  { 0x00001000 "Blown String fuse on input" }
    I_EVENT_UNDER_TEMP         { 0x00002000 "Under temperature" }
    I_EVENT_MEMORY_LOSS        { 0x00004000 "Generic Memory or Communication error (internal)" }
    I_EVENT_HW_TEST_FAILURE    { 0x00008000 "Hardware test failure" }
  }
}


data inverter_model_test {
	103
	50
	900       # I_AC_Current
	300       # I_AC_CurrentA
	290       # I_AC_CurrentB
	302       # I_AC_CurrentC
	-1        # I_AC_Current_SF
	2080      # I_AC_VoltageAB
	2080      # I_AC_VoltageBC
	2080      # I_AC_VoltageCA
	1200      # I_AC_VoltageAN
 	1200      # I_AC_VoltageBN
	1200      # I_AC_VoltageCN
	-1        # I_AC_Voltage_SF
	23402     # I_AC_Power
       -1         # I_AC_Power_SF
	6002      # I_AC_Frequency
	-2        # I_AC_Frequency_SF
	0x8000    # I_AC_VA
	0         # I_AC_VA_SF
	0x8000    # I_AC_VAR
	0         # I_AC_VAR_SF
	0x8000    # I_AC_PF
	0         # I_AC_PF_SF
	uint32:32831049  # I_AC_Energy_WH
	0         # I_AC_Energy_WH_SF
	728       # I_DC_Current
	-1        # I_DC_Current_SF
	302       # I_DC_Voltage
	0         # I_DC_Voltage_SF
	219856    # I_DC_Power
	0         # I_DC_Power_SF
        31        # I_Temp_Cab
	0x8000    # I_Temp_Sink
	0x8000    # I_Temp_Trans
	0x8000    # I_Temp_Other
	0         # I_Temp_SF
	4         # I_Status
	0         # I_Status_Vendor
	uint32:0  # I_Event_1
	uint32:0  # I_Event_2
	uint32:0  # I_Event_1_Vendor
	uint32:0  # I_Event_2_Vendor
	uint32:0  # I_Event_3_Vendor
	uint32:0  # I_Event_4_Vendor
}


#
# floating point inverter model
#
model suns {
  name "inverter_f"
  did 111 "single-phase inverter (float)"
  did 112 "split-phase inverter (float)"
  did 113 "three-phase inverter (float)"
  datapoints {
    I_AC_Current_f             {  float32 u=amps }
    I_AC_CurrentA_f            {  float32 u=amps }
    I_AC_CurrentB_f            {  float32 u=amps }
    I_AC_CurrentC_f            {  float32 u=amps }
    I_AC_VoltageAB_f           {  float32 u=volts }
    I_AC_VoltageBC_f           {  float32 u=volts }
    I_AC_VoltageCA_f           {  float32 u=volts }
    I_AC_VoltageAN_f           {  float32 u=volts }
    I_AC_VoltageBN_f           {  float32 u=volts }
    I_AC_VoltageCN_f           {  float32 u=volts }
    I_AC_Power_f               {  float32 u=watts }
    I_AC_Frequency_f           {  float32 u=hertz }
    I_AC_VA_f                  {  float32 u=va }
    I_AC_VAR_f                 {  float32 u=var }
    I_AC_PF_f                  {  float32 u=pf }
    I_AC_Energy_WH_f           {  float32 u=watthours }
    I_DC_Current_f             {  float32 u=amps }
    I_DC_Voltage_f             {  float32 u=volts }
    I_DC_Power_f               {  float32 u=watts }
    I_Temp_Cab_f               {  float32 u=degrees_c }
    I_Temp_Sink_f              {  float32 u=degrees_c }
    I_Temp_Trans_f             {  float32 u=degrees_c }
    I_Temp_Other_f             {  float32 u=degrees_c }
    I_Status                   {  enum16.I_Status_Enum }
    I_Status_Vendor            {  enum16 }
    I_Event_1                  {  bitfield32.I_Event_1_BF }
    I_Event_2                  {  bitfield32 }
    I_Event_1_Vendor           {  bitfield32 }
    I_Event_2_Vendor           {  bitfield32 }
    I_Event_3_Vendor           {  bitfield32 }
    I_Event_4_Vendor           {  bitfield32 }
  }

  # it would be cool if we didn't have to repeat this
  define T_enum16_Enum {
    I_STATUS_OFF               { 1 "Off" }
    I_STATUS_SLEEPING          { 2 "Sleeping (auto-shutdown)" }
    I_STATUS_STARTING          { 3 "Starting up" }
    I_STATUS_MPPT              { 4 "Tracking power point" }
    I_STATUS_THROTTLED         { 5 "Forced power reduction" }
    I_STATUS_SHUTTING_DOWN     { 6 "Shutting down" }
    I_STATUS_FAULT             { 7 "One or more faults exist" }
    I_STATUS_STANDBY           { 8 "Standby (service on unit)" }
  }

  define T_Event_1_BF {
    I_EVENT_GROUND_FAULT       { 0x00000001 "Ground fault" }
    I_EVENT_DC_OVER_VOLT       { 0x00000002 "DC over voltage" }
    I_EVENT_AC_DISCONNECT      { 0x00000004 "AC disconnect open" }
    I_EVENT_DC_DISCONNECT      { 0x00000008 "DC disconnect open" }
    I_EVENT_GRID_DISCONNECT    { 0x00000010 "Grid shutdown" }
    I_EVENT_CABINET_OPEN       { 0x00000020 "Cabinet open" }
    I_EVENT_MANUAL_SHUTDOWN    { 0x00000040 "Manual shutdown" }
    I_EVENT_OVER_TEMP          { 0x00000080 "Over temperature" }
    I_EVENT_OVER_FREQUENCY     { 0x00000100 "Frequency above limit" }
    I_EVENT_UNDER_FREQUENCY    { 0x00000200 "Frequency under limit" }
    I_EVENT_AC_OVER_VOLT       { 0x00000400 "AC Voltage above limit" }
    I_EVENT_AC_UNDER_VOLT      { 0x00000800 "AC Voltage under limit" }
    I_EVENT_BLOWN_STRING_FUSE  { 0x00001000 "Blown String fuse on input" }
    I_EVENT_UNDER_TEMP         { 0x00002000 "Under temperature" }
    I_EVENT_MEMORY_LOSS        { 0x00004000 "Generic Memory or Communication error (internal)" }
    I_EVENT_HW_TEST_FAILURE    { 0x00008000 "Hardware test failure" }
  }
}


#
# ac meter model
#
model suns {
  name "ac_meter"
  did 201 "single phase (AN or AB) meter"
  did 202 "split single phase (ABN) meter"
  did 203 "wye-connect three phase (abcn) meter"
  did 204 "delta-connect three phase (abc) meter"
  datapoints {
    M_AC_Current                { int16.M_AC_Current_SF u=amps }
    M_AC_Current_A              { int16.M_AC_Current_SF u=amps }
    M_AC_Current_B              { int16.M_AC_Current_SF u=amps }
    M_AC_Current_C              { int16.M_AC_Current_SF u=amps }
    M_AC_Current_SF             { sunssf                }
    M_AC_Voltage_LN             { int16.M_AC_Voltage_SF u=volts }
    M_AC_Voltage_AN             { int16.M_AC_Voltage_SF u=volts }
    M_AC_Voltage_BN             { int16.M_AC_Voltage_SF u=volts }
    M_AC_Voltage_CN             { int16.M_AC_Voltage_SF u=volts }
    M_AC_Voltage_LL             { int16.M_AC_Voltage_SF u=volts }
    M_AC_Voltage_AB             { int16.M_AC_Voltage_SF u=volts }
    M_AC_Voltage_BC             { int16.M_AC_Voltage_SF u=volts }
    M_AC_Voltage_CA             { int16.M_AC_Voltage_SF u=volts }
    M_AC_Voltage_SF             { sunssf                }
    M_AC_Freq                   { int16.M_AC_Freq_SF    u=hz }
    M_AC_Freq_SF                { sunssf                }
    M_AC_Power                  { int16.M_AC_Power_SF   u=watts }
    M_AC_Power_A                { int16.M_AC_Power_SF   u=watts }
    M_AC_Power_B                { int16.M_AC_Power_SF   u=watts }
    M_AC_Power_C                { int16.M_AC_Power_SF   u=watts }
    M_AC_Power_SF               { sunssf                }
    M_AC_VA                     { int16.M_AC_VA_SF      u=volt_amps }
    M_AC_VA_A                   { int16.M_AC_VA_SF      u=volt_amps }
    M_AC_VA_B                   { int16.M_AC_VA_SF      u=volt_amps }
    M_AC_VA_C                   { int16.M_AC_VA_SF      u=volt_amps }
    M_AC_VA_SF                  { sunssf                }
    M_AC_VAR                    { int16.M_AC_VAR_SF     u=volt_amps_reactive }
    M_AC_VAR_A                  { int16.M_AC_VAR_SF     u=volt_amps_reactive }
    M_AC_VAR_B                  { int16.M_AC_VAR_SF     u=volt_amps_reactive }
    M_AC_VAR_C                  { int16.M_AC_VAR_SF     u=volt_amps_reactive }
    M_AC_VAR_SF                 { sunssf                }
    M_AC_PF                     { int16.M_AC_PF_SF      u=powerfactor }
    M_AC_PF_A                   { int16.M_AC_PF_SF      u=powerfactor }
    M_AC_PF_B                   { int16.M_AC_PF_SF      u=powerfactor }
    M_AC_PF_C                   { int16.M_AC_PF_SF      u=powerfactor }
    M_AC_PF_SF                  { sunssf                }
    M_Exported                  { acc32.M_Energy_W_SF   u=watt_hours }
    M_Exported_A                { acc32.M_Energy_W_SF   u=watt_hours }
    M_Exported_B                { acc32.M_Energy_W_SF   u=watt_hours }
    M_Exported_C                { acc32.M_Energy_W_SF   u=watt_hours }
    M_Imported                  { acc32.M_Energy_W_SF   u=watt_hours }
    M_Imported_A                { acc32.M_Energy_W_SF   u=watt_hours }
    M_Imported_B                { acc32.M_Energy_W_SF   u=watt_hours }
    M_Imported_C                { acc32.M_Energy_W_SF   u=watt_hours }
    M_Energy_W_SF               { sunssf                }
    M_Exported_VA               { acc32.M_Energy_VA_SF  u=volt_amps }
    M_Exported_VA_A             { acc32.M_Energy_VA_SF  u=volt_amps }
    M_Exported_VA_B             { acc32.M_Energy_VA_SF  u=volt_amps }
    M_Exported_VA_C             { acc32.M_Energy_VA_SF  u=volt_amps }
    M_Imported_VA               { acc32.M_Energy_VA_SF  u=volt_amps }
    M_Imported_VA_A             { acc32.M_Energy_VA_SF  u=volt_amps }
    M_Imported_VA_B             { acc32.M_Energy_VA_SF  u=volt_amps }
    M_Imported_VA_C             { acc32.M_Energy_VA_SF  u=volt_amps }
    M_Energy_VA_SF              { sunssf                }
    M_Import_VARh_Q1            { acc32.M_Energy_VAR_SF u=var_hours }
    M_Import_VARh_Q1A           { acc32.M_Energy_VAR_SF u=var_hours }
    M_Import_VARh_Q1B           { acc32.M_Energy_VAR_SF u=var_hours }
    M_Import_VARh_Q1C           { acc32.M_Energy_VAR_SF u=var_hours }
    M_Import_VARh_Q2            { acc32.M_Energy_VAR_SF u=var_hours }
    M_Import_VARh_Q2A           { acc32.M_Energy_VAR_SF u=var_hours }
    M_Import_VARh_Q2B           { acc32.M_Energy_VAR_SF u=var_hours }
    M_Import_VARh_Q2C           { acc32.M_Energy_VAR_SF u=var_hours }
    M_Import_VARh_Q3            { acc32.M_Energy_VAR_SF u=var_hours }
    M_Import_VARh_Q3A           { acc32.M_Energy_VAR_SF u=var_hours }
    M_Import_VARh_Q3B           { acc32.M_Energy_VAR_SF u=var_hours }
    M_Import_VARh_Q3C           { acc32.M_Energy_VAR_SF u=var_hours }
    M_Import_VARh_Q4            { acc32.M_Energy_VAR_SF u=var_hours }
    M_Import_VARh_Q4A           { acc32.M_Energy_VAR_SF u=var_hours }
    M_Import_VARh_Q4B           { acc32.M_Energy_VAR_SF u=var_hours }
    M_Import_VARh_Q4C           { acc32.M_Energy_VAR_SF u=var_hours }
    M_Energy_VAR_SF             { sunssf                }
    M_Events                    { bitfield32            }
  }

  define M_Events_BF {
    M_EVENT_Power_failure       { 0x00000004 "Loss of power or phase" }
    M_EVENT_Under_Voltage       { 0x00000008 "Voltage below threshold (Phase Loss)" }
    M_EVENT_Low_PF              { 0x00000010 "Power Factor below threshold" }
    M_EVENT_Over_Current        { 0x00000020 "Current Input over threshold" }
    M_EVENT_Over_Voltage        { 0x00000040 "Voltage Input over threshold" }
    M_EVENT_Missing_Sensor      { 0x00000080 "Sensor not connected" }
    M_EVENT_Reserved1           { 0x00000100 "Reserved for future" }
    M_EVENT_Reserved2           { 0x00000100 "Reserved for future" }
    M_EVENT_Reserved3           { 0x00000100 "Reserved for future" }
    M_EVENT_Reserved4           { 0x00000100 "Reserved for future" }
    M_EVENT_Reserved5           { 0x00000100 "Reserved for future" }
    M_EVENT_Reserved6           { 0x00000100 "Reserved for future" }
    M_EVENT_Reserved7           { 0x00000100 "Reserved for future" }
    M_EVENT_Reserved8           { 0x00000100 "Reserved for future" }
    M_EVENT_OEM1-15             { 0x7FFF0000 "Reserved for OEMs" }
  }
}


#
# ac meter model (float)
#
model suns {
  name "ac_meter_f"
  did 201 "single phase (AN or AB) meter"
  did 202 "split single phase (ABN) meter"
  did 203 "wye-connect three phase (abcn) meter"
  did 204 "delta-connect three phase (abc) meter"
  datapoints {
    M_AC_Current_f              { float32 u=amps }
    M_AC_Current_A_f            { float32 u=amps }
    M_AC_Current_B_f            { float32 u=amps }
    M_AC_Current_C_f            { float32 u=amps }
    M_AC_Voltage_LN_f           { float32 u=volts }
    M_AC_Voltage_AN_f           { float32 u=volts }
    M_AC_Voltage_BN_f           { float32 u=volts }
    M_AC_Voltage_CN_f		        { float32 u=volts }
    M_AC_Voltage_LL_f		        { float32 u=volts }
    M_AC_Voltage_AB_f	        	{ float32 u=volts }
    M_AC_Voltage_BC_f	        	{ float32 u=volts }
    M_AC_Voltage_CA_f		        { float32 u=volts }
    M_AC_Freq_f                 { float32 u=hz }
    M_AC_VA_f                   { float32 u=volt_amps }
    M_AC_VA_A_f                 { float32 u=volt_amps }
    M_AC_VA_B_f                 { float32 u=volt_amps }
    M_AC_VA_C_f                 { float32 u=volt_amps }
    M_AC_VAR_f                  { float32 u=volt_amps_reactive }
    M_AC_VAR_A_f                { float32 u=volt_amps_reactive }
    M_AC_VAR_B_f                { float32 u=volt_amps_reactive }
    M_AC_VAR_C_f                { float32 u=volt_amps_reactive }
    M_AC_PF_f                   { float32 u=powerfactor }
    M_AC_PF_A_f                 { float32 u=powerfactor }
    M_AC_PF_B_f                 { float32 u=powerfactor }
    M_AC_PF_C_f                 { float32 u=powerfactor }
    M_Exported_f                { acc32   u=watthours }
    M_Exported_A_f              { acc32   u=watthours }
    M_Exported_B_f              { acc32   u=watthours }
    M_Exported_C_f              { acc32   u=watthours }
    M_Imported_f                { acc32   u=watthours }
    M_Imported_A_f              { acc32   u=watthours }
    M_Imported_B_f              { acc32   u=watthours }
    M_Imported_C_f              { acc32   u=watthours }
    M_Exported_VA_f             { acc32   u=volt_amps }
    M_Exported_VA_A_f           { acc32   u=volt_amps }
    M_Exported_VA_B_f           { acc32   u=volt_amps }
    M_Exported_VA_C_f           { acc32   u=volt_amps }
    M_Imported_VA_f             { acc32   u=volt_amps }
    M_Imported_VA_A_f           { acc32   u=volt_amps }
    M_Imported_VA_B_f           { acc32   u=volt_amps }
    M_Imported_VA_C_f           { acc32   u=volt_amps }
    M_Import_VARh_Q1_f          { acc32   u=var_hours }
    M_Import_VARh_Q1A_f         { acc32   u=var_hours }
    M_Import_VARh_Q1B_f         { acc32   u=var_hours }
    M_Import_VARh_Q1C_f         { acc32   u=var_hours }
    M_Import_VARh_Q2_f          { acc32   u=var_hours }
    M_Import_VARh_Q2A_f         { acc32   u=var_hours }
    M_Import_VARh_Q2B_f         { acc32   u=var_hours }
    M_Import_VARh_Q2C_f         { acc32   u=var_hours }
    M_Import_VARh_Q3_f          { acc32   u=var_hours }
    M_Import_VARh_Q3A_f         { acc32   u=var_hours }
    M_Import_VARh_Q3B_f         { acc32   u=var_hours }
    M_Import_VARh_Q3C_f         { acc32   u=var_hours }
    M_Import_VARh_Q4_f          { acc32   u=var_hours }
    M_Import_VARh_Q4A_f         { acc32   u=var_hours }
    M_Import_VARh_Q4B_f         { acc32   u=var_hours }
    M_Import_VARh_Q4C_f         { acc32   u=var_hours }
    M_Events                    { bitfield32 }
  }
    
  define M_Events_BF {
    M_EVENT_Power_failure       { 0x00000004 "Loss of power or phase" }
    M_EVENT_Under_Voltage       { 0x00000008 "Voltage below threshold (Phase Loss)" }
    M_EVENT_Low_PF              { 0x00000010 "Power Factor below threshold" }
    M_EVENT_Over_Current        { 0x00000020 "Current Input over threshold" }
    M_EVENT_Over_Voltage        { 0x00000040 "Voltage Input over threshold" }
    M_EVENT_Missing_Sensor      { 0x00000080 "Sensor not connected" }
    M_EVENT_Reserved1           { 0x00000100 "Reserved for future" }
    M_EVENT_Reserved2           { 0x00000100 "Reserved for future" }
    M_EVENT_Reserved3           { 0x00000100 "Reserved for future" }
    M_EVENT_Reserved4           { 0x00000100 "Reserved for future" }
    M_EVENT_Reserved5           { 0x00000100 "Reserved for future" }
    M_EVENT_Reserved6           { 0x00000100 "Reserved for future" }
    M_EVENT_Reserved7           { 0x00000100 "Reserved for future" }
    M_EVENT_Reserved8           { 0x00000100 "Reserved for future" }
    M_EVENT_OEM1-15             { 0x7FFF0000 "Reserved for OEMs" }
  }
}


#
# environmental models
#

#
# original base meteorological model
# deprecated?
#
model suns {
  name "met"
  did 301 "base meteorological"
  datapoints {
    E_BaseMet_AirTemperature      { int32 u=degrees_c }
    E_BaseMet_RelativeHumidity    { int32 u=percent   }
    E_BaseMet_BarometricPressure  { int32 u=HPa       }
    E_BaseMet_WindSpeed           { int32 u="m/s"     }
    E_BaseMet_WindDirection       { int32 u=degrees   }
    E_BaseMet_Rain                { int32 u=inches    }
    E_BaseMet_Snow                { int32 u=inches    }
    E_BaseMet_PPTType             { int32 }
    E_BaseMet_ElectricalField     { int32 u="V/m" }
    E_BaseMet_SurfaceWetness      { int32 u=kOhms }
    E_BaseMet_SoilMoisture        { int32 u=percent }
  }
}


data suns_met301_test {
	301
	22
	int32:18
	int32:222
	int32:17
	int32:234
	int32:10
	int32:0
	int32:0x80000000
	int32:0x80000000
	int32:0x80000000
	int32:0x80000000
	int32:0x80000000
}

#
# version 1.1 base meteorological model
#
model suns {
  name "met_v1.1"
  did 307 "meteorological v1.1"
  datapoints {
    E_BaseMet_AirTemperature         { int16.-1  u=degrees_c }
    E_BaseMet_RelativeHumidity       { int16     u=percent   }
    E_BaseMet_BarometricPressure     { int16     u=HPa       }
    E_BaseMet_WindSpeed              { int16     u="m/s"     }
    E_BaseMet_WindDirection          { int16     u=degrees   }
    E_BaseMet_Rain                   { int16     u=mm        }
    E_BaseMet_Snow                   { int16     u=mm        }
    E_BaseMet_PPTType                { int16                 }
    E_BaseMet_ElectricField          { int16     u="V/m"     }
    E_BaseMet_SurfaceWetness         { int16     u=kOhms     }
    E_BaseMet_SoilMoisture           { int16     u=percent   }
  }
}


data suns_met307_test {
	307
	11
	uint16:18
	uint16:222
	uint16:17
	uint16:234
	uint16:10
	uint16:0
	uint16:0x80000000
	uint16:0x80000000
	uint16:0x80000000
	uint16:0x80000000
	uint16:0x80000000
}

#
# irradiance model
#
model suns {
  name "met_irr"
  did 302 "irradiance"
  datapoints repeating {
    E_Irradiance_Global_Horizontal   { uint16 u="W/m^2" }
    E_Irradiance_Plane_of_Array      { uint16 u="W/m^2" }
    E_Irradiance_Diffuse             { uint16 u="W/m^2" }
    E_Irradiance_Direct              { uint16 u="W/m^2" }
    E_Irradiance_Other               { uint16 u="W/m^2" }
  }
}

#
# back of module temperature
#
model suns {
  name "met_bom"
  did 303 "back of module temperature"
  datapoints repeating {
    E_BOM_Temp                       { int16.-1 u=degrees_c }
  }
}


data suns_met303_test {
	303
	4
	int16:20
	int16:18
	int16:19
	int16:21
}	

#
# inclinometer
#
model suns {
  name "met_incl"
  did 304 "inclinometer"
  datapoints repeating {
    E_InclinometerUx                 { int32.-2 u=degrees }
    E_InclinometerUy                 { int32.-2 u=degrees }
    E_InclinometerUz                 { int32.-2 u=degress }
  }
}


data suns_met304_test {
	304
	12
	int32:920
	int32:0x80000000
	int32:0x80000000
	int32:930
	int32:0x80000000
	int32:0x80000000
}


#
# location
#
model suns {
  name "location"
  did 305 "location"
  datapoints {
    E_GPS_UTC                       { string.10 }
    E_GPS_Date                      { string.08 }
    E_GPS_Location                  { string.40 }
    E_GPS_Latitude                  { int32.-7  u=degrees }
    E_GPS_Longitude                 { int32.-7  u=degrees }
    E_GPS_Altitude                  { int32     u=meters  }
  }
}

#
# reference point
#
model suns {
  name "reference point"
  did 306 "reference_point"
  datapoints repeating {
    E_RefPoint_Irradiance           { int16    }
    E_RefPoint_Current              { int32.-2 u=amps }
    E_RefPoint_Voltage              { int32.-2 u=volts }
    E_RefPoint_Temperature          { int32.-1 u=degrees_c}  # wrong in v1.1 of model
  }
}


#
# mini weather model map
#
model suns {
  name "mini_met"
  did 308 "mini_met"
  datapoints {
    E_Irradiance_Global_Horizontal  { uint16 u="w/m^2" }
    E_BOM_Temp                      { int16.-1 u=degrees_c }
    E_BaseMet_AirTemperature        { int16.-1 u=degrees_c }
    E_BaseMet_WindSpeed             { int16 u="m/s" }
  }
}


#
# string_combiner
#
model suns {
	name "string_combiner"
	did 401 "string_combiner"
	# common datapoints
	datapoints {
		SC_DC_Current_SF				{ sunssf u=amps }
		SC_DC_AH_SF							{ sunssf u=amp_hours }
		SC_DC_Voltage_SF				{ sunssf u=volts }
		SC_DC_Current_Max				{ uint16.SC_DC_Current_SF }
		SC_Num_Inputs						{ uint16 }
		SC_Event								{ bitfield32 }
		SC_Event_Vendor					{ bitfield32 }
		SC_DC_Current						{ int16.SC_DC_Current_SF u=amps }
		SC_DC_AmpHour						{ uint32.SC_DC_AH_SF u=amp_hours }
		SC_DC_Voltage						{ uint16.SC_DC_Voltage_SF u=volts }
		SC_Internal_Temp				{ uint16 u=degrees_c }
	}  
	# per-string datapoints
	datapoints repeating {
		SC_Input_ID							{ uint16 }
		SC_Input_Event					{ bitfield32 }
		SC_Input_Event_Vendor		{ bitfield32 }
		SC_Input_DC_Current			{ int16.SC_DC_Current_SF u=amps }
		SC_Input_DC_AmpHours		{ uint32.SC_DC_AH_SF u=amp_hours }
	}
}


#
# string_combiner
#
model suns {
	name "advanced_string_combiner"
	did 402 "advanced_string_combiner"
	# common datapoints
	datapoints {
		SC_DC_Current_SF				{ sunssf }
		SC_DC_AH_SF							{ sunssf }
		SC_DC_Voltage_SF				{ sunssf }
    SC_DC_Power_SF          { sunssf }
		SC_DC_Current_Max				{ uint16 u=amps }
		SC_Num_Inputs						{ uint16 }
		SC_Event								{ bitfield32 }
		SC_Event_Vendor					{ bitfield32 }
		SC_DC_Current						{ int16  u=amps }
		SC_DC_AmpHour						{ uint32 u=amps_hours }
		SC_DC_Voltage						{ uint16 u=volts }
		SC_Internal_Temp				{ uint16 u=degrees_c }
    SC_DC_Power             { int16  u=amps }
    SC_DC_PR                { uint16 u=percent }
    SC_DC_Energy            { uint32 u=watt_hours }
	}  
	# per-string datapoints
	datapoints repeating {
		SC_Input_ID							{ uint16 }
		SC_Input_Event					{ bitfield32 }
		SC_Input_Event_Vendor		{ bitfield32 }
		SC_Input_DC_Current			{ int16.SC_DC_Current_SF u=amps }
		SC_Input_DC_AmpHours		{ uint32.SC_DC_AH_SF u=amp_hours  }
    SC_Input_DC_Voltage     { uint16.SC_DC_Voltage_SF u=volts      }
    SC_Input_DC_Power       { int16.SC_DC_Poer_SF  u=watts      }
    SC_Input_DC_Energy      { uint32 u=watt_hours }
    SC_Input_DC_PR          { uint16 u=percent    }
    SC_Input_Num_Modules    { uint16 }
	}
}


data string_combiner_test {
	401
	30
	-2							#		SC_DC_Current_SF
	0								#		SC_DC_AH_SF
	-2							#		SC_DC_Voltage_SF
	5423						#		SC_DC_Current_Max
	2								#		SC_Num_Inputs
	bitfield32:0x00	#		SC_Event
	bitfield32:0x00	#		SC_Event_Vendor
	5295						#		SC_DC_Current
	uint32:29832 		#		SC_DC_AmpHour
	31423						#		SC_DC_Voltage
	22							#		SC_Internal_Temp

	0								# 	SC_Input_ID
	bitfield32:0x01	# 	SC_Input_Event
	bitfield32:0x04	# 	SC_Input_Event_Vendor
	2623  					# 	SC_Input_DC_Current
	uint32:20948		# 	SC_Input_DC_AmpHours

	1								# 	SC_Input_ID
	bitfield32:0x02	# 	SC_Input_Event
	bitfield32:0x0B	# 	SC_Input_Event_Vendor
	3723  					# 	SC_Input_DC_Current
	uint32:34948		# 	SC_Input_DC_AmpHours
}


#
# Basic Aggregator Model
#
model suns {
  did 002 "basic_aggregator"
  datapoints {
    A_Devices                     { uint16 }  
	A_Count                       { uint16 }
    A_Update_Number               { uint16 }
    A_Status                      { enum16 }
    A_Status_Vendor               { enum16 }
    A_Event                       { bitfield32 }
    A_Event_Vendor                { bitfield32 }
    A_Control                     { enum16 }
    A_Control_Vendor              { enum32 }
    A_Control_Value               { enum32 }
  }
}
      
#
# Panel Module (Floating Point)
#
model suns {
  did 501 "panel_module_float"
  datapoints {
    P_Status                      { enum16 }
    P_Status_Vendor               { enum16 }
    P_Event                       { bitfield32 }
    P_Event_Vendor                { bitfield32 }
    P_Control                     { enum16 }
    P_Control_Vendor              { enum32 }
    P_Control_Value               { int32 }
    P_Data_Timestamp              { uint32 u=seconds }
    P_DC_Output_Current           { float32 u=amps }
    P_DC_Output_Voltage           { float32 u=volts }
    P_DC_Output_Energy            { float32 u=watthours }
    P_DC_Output_Power             { float32 u=watts }
    P_Temp                        { float32 u=degrees_c }
    P_DC_Input_Current            { float32 u=amps }
    P_DC_Input_Voltage            { float32 u=volts }
    P_DC_Input_Energy             { float32 u=watthours }
    P_DC_Input_Power              { float32 u=watts }
  }

  define P_Status {
    P_STATUS_OFF              {  1 "Off" }
    P_STATUS_SLEEPING         {  2 "Sleeping (auto-shutdown) or panel is at low/safe output power/voltage" }
    P_STATUS_STARTING         {  3 "Starting up or ON but not producting power; panel might have high voltage but is not producing power" }
    P_STATUS_MPPT             {  4 "Tracking MPPT power point" }
    P_STATUS_THROTTLED        {  5 "Forced power reduction / power de-rating" }
    P_STATUS_SHUTTING_DOWN    {  6 "Shutting down" }
    P_STATUS_FAULT            {  7 "One or more faults exist" }
    P_STATUS_STANDBY          {  8 "Standby (service or unit) - unlike SLEEPING in this mode the module might be at a high (unsafe) output voltage or power" }
    P_STATUS_TEST             {  9 "Test mode" }
    P_STATUS_OTHER            { 10 "As defined in vendor specific status" }
  }

  define P_Event {
    P_EVENT_GROUND_FAULT      { 0x00000001 "Ground Fault" }
    P_EVENT_INPUT_OVER_VOLTAGE  { 0x00000002 "DC input over-voltage" }
    RESERVED                  { 0x00000004 "Reserved for u-inverter compatibility" }
    P_EVENT_DC_DISCONNECT     { 0x00000008 "DC disconnect open" }
    RESERVED                  { 0x00000010 "Reserved for u-inverter compatibility" }
    RESERVED                  { 0x00000020 "Reserved for u-inverter compatibility" }
    P_EVENT_MANUAL_SHUTDOWN   { 0x00000040 "Manual shutdown" }
    P_EVENT_OVER_TEMPERATURE  { 0x00000080 "Over Temperature" }
    RESERVED                  { 0x00000100 "Reserved for u-inverter compatibility" }
    RESERVED                  { 0x00000200 "Reserved for u-inverter compatibility" }
    RESERVED                  { 0x00000400 "Reserved for u-inverter compatibility" }
    RESERVED                  { 0x00000800 "Reserved for u-inverter compatibility" }
    P_EVENT_BLOWN_FUSE        { 0x00001000 "Blown Input Fuse" }
    P_EVENT_UNDER_TEMPERATURE { 0x00002000 "Under Temperature" }
    P_EVENT_MEMORY_LOSS       { 0x00004000 "Generic Memory or Communication Error." }
    P_EVENT_ARC_DETECTION     { 0x00010000 "Arc Detection" }
    P_EVENT_THEFT_DETECTION   { 0x00020000 "Theft Detection" }
    P_EVENT_OUTPUT_OVER_CURRENT { 0x00040000 "Output Over Current" }
    P_EVENT_OUTPUT_OVER_VOLTAGE { 0x00080000 "DC Output Over Voltage" }
    P_EVENT_OUTPUT_UNDER_VOLTAGE { 0x00100000 "DC Output Under Voltage" }
    P_EVENT_TEST_FAILED       { 0x00200000 "Last Self Test failed; see vendor eent for details." }
    RESERVED                  { 0xFF600000 "Reserved for SunSpec" }
  }
}


#
# Panel Module (Integer)
#
model suns {
  did 502 "panel_module_integer"
  datapoints {
    P_DC_Current_SF               { sunssf }
    P_DC_Voltage_SF               { sunssf }
    P_DC_Power_SF                 { sunssf }
    P_DC_Energy_SF                { sunssf }
    P_Status                      { enum16 }
    P_Status_Vendor               { enum16 }
    P_Event                       { bitfield32 }
    P_Event_Vendor                { bitfield32 }
    P_Control                     { enum16 }
    P_Control_Vendor              { enum32 }
    P_Control_Value               { int32 }
    P_Data_Timestamp              { uint32 u=seconds }
    P_DC_Output_Current           { int16 u=amps }
    P_DC_Output_Voltage           { int16 u=volts }
    P_DC_Output_Energy            { uint32 u=watthours }
    P_DC_Output_Power             { int16 u=watts }
    P_Temp                        { int16 u=degrees_c }
    P_DC_Input_Current            { int16 u=amps }
    P_DC_Input_Voltage            { int16 u=volts }
    P_DC_Input_Energy             { uint32 u=watthours }
    P_DC_Input_Power              { int16 u=watts }
  }
      
  define P_Status {
    P_STATUS_OFF              {  1 "Off" }
    P_STATUS_SLEEPING         {  2 "Sleeping (auto-shutdown) or panel is at low/safe output power/voltage" }
    P_STATUS_STARTING         {  3 "Starting up or ON but not producting power; panel might have high voltage but is not producing power" }
    P_STATUS_MPPT             {  4 "Tracking MPPT power point" }
    P_STATUS_THROTTLED        {  5 "Forced power reduction / power de-rating" }
    P_STATUS_SHUTTING_DOWN    {  6 "Shutting down" }
    P_STATUS_FAULT            {  7 "One or more faults exist" }
    P_STATUS_STANDBY          {  8 "Standby (service or unit) - unlike SLEEPING in this mode the module might be at a high (unsafe) output voltage or power" }
    P_STATUS_TEST             {  9 "Test mode" }
    P_STATUS_OTHER            { 10 "As defined in vendor specific status" }
  }

  define P_Event {
    P_EVENT_GROUND_FAULT      { 0x00000001 "Ground Fault" }
    P_EVENT_INPUT_OVER_VOLTAGE  { 0x00000002 "DC input over-voltage" }
    RESERVED                  { 0x00000004 "Reserved for u-inverter compatibility" }
    P_EVENT_DC_DISCONNECT     { 0x00000008 "DC disconnect open" }
    RESERVED                  { 0x00000010 "Reserved for u-inverter compatibility" }
    RESERVED                  { 0x00000020 "Reserved for u-inverter compatibility" }
    P_EVENT_MANUAL_SHUTDOWN   { 0x00000040 "Manual shutdown" }
    P_EVENT_OVER_TEMPERATURE  { 0x00000080 "Over Temperature" }
    RESERVED                  { 0x00000100 "Reserved for u-inverter compatibility" }
    RESERVED                  { 0x00000200 "Reserved for u-inverter compatibility" }
    RESERVED                  { 0x00000400 "Reserved for u-inverter compatibility" }
    RESERVED                  { 0x00000800 "Reserved for u-inverter compatibility" }
    P_EVENT_BLOWN_FUSE        { 0x00001000 "Blown Input Fuse" }
    P_EVENT_UNDER_TEMPERATURE { 0x00002000 "Under Temperature" }
    P_EVENT_MEMORY_LOSS       { 0x00004000 "Generic Memory or Communication Error." }
    P_EVENT_ARC_DETECTION     { 0x00010000 "Arc Detection" }
    P_EVENT_THEFT_DETECTION   { 0x00020000 "Theft Detection" }
    P_EVENT_OUTPUT_OVER_CURRENT { 0x00040000 "Output Over Current" }
    P_EVENT_OUTPUT_OVER_VOLTAGE { 0x00080000 "DC Output Over Voltage" }
    P_EVENT_OUTPUT_UNDER_VOLTAGE { 0x00100000 "DC Output Under Voltage" }
    P_EVENT_TEST_FAILED       { 0x00200000 "Last Self Test failed; see vendor eent for details." }
    RESERVED                  { 0xFF600000 "Reserved for SunSpec" }
  }
}

