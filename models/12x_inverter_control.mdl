# 
# Copyright (c) 2011-2012, John D. Blair <jdb@moship.net>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# 
# * Neither the name of John D. Blair nor his lackeys may be used
#   to endorse or promote products derived from this software
#   without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
# JOHN D. BLAIR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

#
# inverter nameplate ratings
#
model suns {
    name "inverter nameplate"
    did 120 "inverter_nameplate"
    datapoints {
        WRtg            { uint16.WRtg_SF req }
        WRtg_SF         { sunssf req }
        VARtg           { uint16 req }
        VARtg_SF        { sunssf req }
        VArPosRtg       { uint16.VArRtg_SF req }
        VArNegRtg       { uint16.VArRtg_SF req }
        VArRtg_SF       { sunssf req }
        ARtg            { uint16 req }
        ARtg_SF         { sunssf req }
        PFLeadRtg       { int16.PFRtgSF req }
        PFLagRtg        { int16.PFRtg_SF req }
        PFRtg_SF        { sunssf req }
        WHRtg_SF        { sunssf }
        MaxChgRte       { uint16.MaxChgRte_SF }
        MaxChgRte_SF    { int16 }
        MaxDisChgRte    { uint16.MaxDisChgRte_SF }
        MaxDisChgRte_SF { int16 }
    }
}

#
# Inverter Control Basic Settings
#
model suns {
    name "inverter_basic_settings"
    did 121 "inverter_basic_settings"
    datapoints {
        WMax            { uint16.WMax_SF u=W access=rw req }
        WMax_SF         { sunssf access=rw access=rw req }
        WRef            { uint16.WMax_SF u=W access=rw }
        VMax            { uint16.VMinMax_SF u=V access=rw }
        VMin            { uint16.VMinMax_SF u=V access=rw }
        VMinMax_SF      { sunssf access=rw }
        VAMax           { uint16.VAMax_SF u=VA access=rw }
        VAMax_SF        { sunssf access=rw }
        VArPosMax       { uint16.VArMax_SF u=VAr access=rw }
        VArNegMax       { uint16.VArMax_SF u=VAr access=rw }
        VArMax_SF       { sunssf access=rw u=VAr }
        VRef            { uint16.VRef_SF u=V access=rw req }
        VRef_SF         { sunssf access=rw req }
        VRefOfs         { int16.VRefOfs_SF u=V access=rw req }
        VRefOfs_SF      { sunssf access=rw req }
        WGra            { int16.WGra_SF u=perc access=rw }
        WGra_SF         { sunssf access=rw }
        PFSign          { enum16.PFSign_enum access=rw }
        PFLeadMin       { int16.PFMin_SF u=cosT access=rw }
        PFLagMin        { int16.PFMin_SF u=cosT access=rw }
        PFMin_SF        { sunssf access=rw }
        VArAct          { enum16.VArAct_enum access=rw }
        ClcTotVA        { enum16.ClcTotVA_enum access=rw }
        MaxRmpRte       { uint16.MaxRmpRte_SF u=perc access=rw }
        MaxRmpRte_SF    { sunssf access=rw }
        ECPNomHz        { uint16.ECPNomHz_SF u=Hz access=rw }
        ECPNomHz_SF     { sunssf access=rw }
        Connected_Phase { enum16.Connected_Phase_enum access=rw }
    }

    define PFSign_enum {
        I_IEC  { 1 "IEC sign convention" }
        I_IEEE { 2 "IEEE sign convention" }
    }

    define VArAct_enum {
        switch   { 1 "switch VAr characterization" }
        maintain { 2 "maintain VAr characterization" }
    }

    define ClcTotVA_enum {
        vector     { 1 "vector calculation" }
        arithmetic { 2 "arithmetic calculation" }
    }
 
    define Connected_Phase_enum {
        PhA { 1 "phase A" }
        PhB { 2 "phase B" }
        PhC { 3 "phase C" }
    }
}


#
# Measurements Status
#
model suns {
    name "measurements_status"
    did 122 "inverter_basic_settings"
    datapoints {
        PVConn                  { enum16.ConnAvail_enum }
        StorConn                { enum16.ConnAvail_enum }
        ECPConn                 { enum16.ECPConn_enum }
        ActWh                   { acc64 u=Wh }
        ActVAh                  { acc64 u=VAh }
        ActVArhQ1               { acc64 u=VArh }
        ActVArhQ2               { acc64 u=VArh }
        ActVArhQ3               { acc64 u=VArh }
        ActVArhQ4               { acc64 u=VArh }
        VArAval                 { uint16.VArAval_SF u=VAr }
        VArAval_SF              { sunssf }
        StaSetLimMsk            { bitfield32.StaSetLimMsk_bf }
        TmSrc                   { string.16 }
        CurrTime                { uint32 u=Tms2000 }
    }


    define ConnAvail_enum {
        NA                      { 0 "not available" }
        DISCONNECTED_UNAVAIL    { 1 "disconnected unavailable" }
        DISCONNECTED_AVAIL      { 2 "disconnected available" }
        CONNECTED_UNAVAIL       { 3 "connected unavailable" }
        CONNECTED_AVAIL         { 4 "connected available" }
        CONNECTED_ON            { 5 "connected on" }
        TEST_MODE               { 6 "test mode" }
    }

    define ConnBool_enum {
        DISCONNECTED            { 0 "disconnected" }
        CONNECTED               { 1 "connected" }
    }

    define StaSetLimMsk_bf {
        WMax                    { 1 "" }
        VAMax                   { 2 "" }
        VArPosMax               { 3 "" }
        VArNegMax               { 4 "" }
        VArAval                 { 5 "" }
        PFLeadMin               { 6 "" }
        PFLagMin                { 7 "" }
    }
}

        
#
# Immediate Inverter Controls
#
model suns {
    name "Immediate_Inverter_Controls"
    did 123 "Immediate_Inverter_Controls"
    datapoints {
        Mod                 { bitfield16.ImmCtl_bf access=rw req }
        Conn                { enum16.Conn_enum access=rw req }
        Conn_WinTms         { uint16 access=rw u=Tms }
        Conn_RvrtTms        { uint16 access=rw u=Tms }
        WMaxLimPct          { uint16.WMaxLimPct_SF access=rw u=perc req }
        WMaxLimPct_SF       { sunssf req }
        WMaxLimPct_WinTms   { uint16 access=rw u=Tms }
        WMaxLimPct_RvrtTms  { uint16 access=rw u=Tms }
        WMaxLimPct_RmpTms   { uint16.WMaxLimPct_SF access=rw u=Tms }
        OutPFSet            { int16.OutPFSet_SF u=cosT req access=rw }
        PFExt               { enum16.PFExt_enum access=rw }
        OutPFSet_SF         { sunssf req access=rw }
        OutPFSet_WinTms     { uint16 u=Tms access=rw }
        OutPFSet_RvrtTms    { uint16 u=Tms access=rw }
        VArLim_Mode         { enum16.VArLim_Mode_enum req access=rw }
        VArWMaxPct          { uint16 u=perc access=rw }
        VArWMaxPct_SF       { sunssf access=rw }
        VArMaxPct           { uint16 u=perc access=rw }
        VArAvalPct          { uint16 u=perc access=rw }
        VArPct_SF           { sunssf access=rw }
        VArPct_WinTms       { uint16 u=Tms access=rw }
        VArPct_RvrtTms      { uint16 u=Tms access=rw }
        VArPct_RmpTms       { uint16 u=Tms access=rw }
    }

    define Conn_enum {
        DISCONNECT          { 0 "disconnect from grid" }
        CONNECT             { 1 "connect to gred" }
    }

    define PFExt_enum {
        OVER                { 0 "overexcited" }
        UNDER               { 1 "underexcited" }
    }

    define VArLim_Mode_enum {
        NO_LIMIT            { 0 "no VAR limit" }
        WMAX                { 1 "limit as percentage of WMax" }
        VARMAX              { 2 "limit as percentage of VArMax" }
        VARAVAL             { 3 "limit as percentage of VArAval" }
    }
}




#
# Static Volt-Var
#
model suns {
    name "Static_Volt_Var"
    did 8007 "Static_Volt_Var"
    datapoints {
        VV_NCurves          { uint16 }
        VV_NPoints          { uint16 }
        VV_Active           { uint16 }
        VV_Active_Curve     { uint16 }
        VV_WinTms           { uint16 }
        VV_RvrtTms          { uint16 }
        VV_WinTms           { uint16 }
        VV_RmpTms           { uint16 }
        VV_Volt_SF          { sunssf }
        VV_RmpIncDec_SF     { sunssf }
    }
    datapoints repeating {
        CrvNam              { string.16 }
        ActPt               { uint16 }
        DeptRef             { uint16 }
        DeptRef_SF          { sunssf }
        RmpPT1Tms           { uint16 }
        RmpDecTmm           { uint16 }
        RmpIncTmm           { uint16 }
        V01                 { uint16 }
        VAr01               {  int16 }
        V02                 { uint16 }
        VAr02               {  int16 }
        V03                 { uint16 }
        VAr03               {  int16 }
        V04                 { uint16 }
        VAr04               {  int16 }
        V05                 { uint16 }
        VAr05               {  int16 }
        V06                 { uint16 }
        VAr06               {  int16 }
        V07                 { uint16 }
        VAr07               {  int16 }
        V08                 { uint16 }
        VAr08               {  int16 }
        V09                 { uint16 }
        VAr09               {  int16 }
        V10                 { uint16 }
        VAr10               {  int16 }
    }
}
