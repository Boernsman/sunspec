# 
# Copyright (c) 2011-2012, John D. Blair <jdb@moship.net>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# 
# * Neither the name of John D. Blair nor his lackeys may be used
#   to endorse or promote products derived from this software
#   without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
# JOHN D. BLAIR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.


#
# string_combiner
#
model suns {
  name "string_combiner"
  did 401 "string_combiner"
  # common datapoints
  datapoints {
    DCA_SF                  { sunssf req }
    DCAH_SF                 { sunssf }
    DCV_SF                  { sunssf }
    DCA_Max                 { uint16.DCA_SF u=A req }
    N                       { uint16 label="Number of Inputs" req }
    Evt                     { bitfield32 label="Combiner Event Flags" req }
    EvtVnd                  { bitfield32 label="Combiner Vendor Event Flags" }
    DCA                     { int16.DCA_SF u=A label="DC Current" req }
    DCAH                    { uint32.DCAH_SF u=Ah label="DC Amp Hours"}
    DCV                     { uint16.DCV_SF u=V label="DC Voltage" }
    DCTmp                   { uint16 u=C label="Temperature" }
  }  
  # per-string datapoints
  datapoints repeating {
    InID                    { uint16 label="Input ID" req }
    InEvt                   { bitfield32 label="Input Event Flags" req }
    InEvtVnd                { bitfield32 label="Input Vendor Event Flags" }
    InDCA                   { int16.DCA_SF u=A label="Input DC Current" req }
    InDCAH                  { uint32.DCAH_SF u=Ah label="Input DC Amp Hours" }
  }
}


#
# string_combiner (deprecated)
#
model suns {
  name "advanced_string_combiner"
  did 402 "advanced_string_combiner"
  # common datapoints
  datapoints {
    DCA_SF                  { sunssf }
    DCAH_SF                 { sunssf }
    DCV_SF                  { sunssf }
    DCW_SF                  { sunssf }
    DCWh_SF                 { sunssf }
    DCAMax                  { uint16 u=A }
    N                       { uint16 }
    Evt                     { bitfield32 }
    EvtVnd                  { bitfield32 }
    DCA                     { int16  u=A }
    DCAH                    { uint32 u=Ah }
    DCV                     { uint16 u=V }
    Tmp                     { uint16 u=C }
    DCW                     { int16  u=W }
    DC_PR                   { uint16 u=perc }
    DC_Energy               { uint32 u=Wh }
  }  
  # per-string datapoints
  datapoints repeating {
    InID                    { uint16 }
    InEvt                   { bitfield32 }
    EvtVnd                  { bitfield32 }
    InDCA                   { int16.DCA_SF u=A }
    InDCAH                  { uint32.DCAH_SF u=Ah  }
    InDCV                   { uint16.DCV_SF u=V      }
    InDCW                   { int16.DCWh_SF  u=W      }
    INDCWh                  { uint32 u=Wh }
    InDCPR                  { uint16 u=perc }
  }
}


data string_combiner_test {
  401
  30
  -2              #   SC_DC_Current_SF
  0               #   SC_DC_AH_SF
  -2              #   SC_DC_Voltage_SF
  5423            #   SC_DC_Current_Max
  2               #   SC_Num_Inputs
  bitfield32:0x00 #   SC_Event
  bitfield32:0x00 #   SC_Event_Vendor
  5295            #   SC_DC_Current
  uint32:29832    #   SC_DC_AmpHour
  31423           #   SC_DC_Voltage
  22              #   SC_Internal_Temp

  0               #   SC_Input_ID
  bitfield32:0x01 #   SC_Input_Event
  bitfield32:0x04 #   SC_Input_Event_Vendor
  2623            #   SC_Input_DC_Current
  uint32:20948    #   SC_Input_DC_AmpHours

  1               #   SC_Input_ID
  bitfield32:0x02 #   SC_Input_Event
  bitfield32:0x0B #   SC_Input_Event_Vendor
  3723            #   SC_Input_DC_Current
  uint32:34948    #   SC_Input_DC_AmpHours
}



#
# string_combiner
#
model suns {
  name "string_combiner"
  did 403 "string_combiner"
  # common datapoints
  datapoints {
    DCA_SF                  { sunssf req }
    DCAH_SF                 { sunssf }
    DCV_SF                  { sunssf }
    DCA_Max                 { uint16.DCA_SF u=A req }
    N                       { uint16 label="Number of Inputs" req }
    Evt                     { bitfield32 label="Combiner Event Flags" req }
    EvtVnd                  { bitfield32 label="Combiner Vendor Event Flags" }
    DCA                     { int16.DCA_SF u=A label="DC Current" req }
    DCAH                    { uint32.DCAH_SF u=Ah label="DC Amp Hours"}
    DCV                     { uint16.DCV_SF u=V label="DC Voltage" }
    DCTmp                   { uint16 u=C label="Temperature" }
    InDCA_SF                { sunssf }
    InDCAhr_SF              { sunssf }
  }  
  # per-string datapoints
  datapoints repeating {
    InID                    { uint16 label="Input ID" req }
    InEvt                   { bitfield32 label="Input Event Flags" req }
    InEvtVnd                { bitfield32 label="Input Vendor Event Flags" }
    InDCA                   { int16.DCA_SF u=A label="Input DC Current" req }
    InDCAH                  { uint32.DCAH_SF u=Ah label="Input DC Amp Hours" }
  }
}



#
# string_combiner
#
model suns {
  name "advanced_string_combiner"
  did 404 "advanced_string_combiner"
  # common datapoints
  datapoints {
    DCA_SF                  { sunssf req }
    DCAH_SF                 { sunssf }
    DCV_SF                  { sunssf }
    DCW_SF                  { sunssf }
    DCWh_SF                 { sunssf }
    DCAMax                  { uint16 u=A req }
    N                       { uint16 req }
    Evt                     { bitfield32 req }
    EvtVnd                  { bitfield32 }
    DCA                     { int16  u=A req }
    DCAH                    { uint32 u=Ah }
    DCV                     { uint16 u=V }
    Tmp                     { uint16 u=C }
    InDCA_SF                { sunssf }
    InDCAhr_SF              { sunssf }
    DCW                     { int16  u=W }
    DCPR                    { uint16 u=perc }
    DCWh                    { uint32 u=Wh }
    InDCA_SF                { sunssf }
    InDCAH_SF               { sunssf }
    InDCV_SF                { sunssf }
    InDCW_SF                { sunssf }
  }  
  # per-string datapoints
  datapoints repeating {
    InID                    { uint16 req }
    InEvt                   { bitfield32 req }
    EvtVnd                  { bitfield32 }
    InDCA                   { int16.InDCA_SF u=A req }
    InDCAH                  { uint32.InDCAH_SF u=Ah  }
    InDCV                   { uint16.InDCV_SF u=V      }
    InDCW                   { int16.InDCW_SF  u=W      }
    INDCWh                  { uint32.InDCWh_SF u=Wh }
    InDCPR                  { uint16 u=perc }
  }
}


